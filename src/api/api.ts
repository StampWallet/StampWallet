/* tslint:disable */
/* eslint-disable */
/**
 * StampWallet API Server
 * StampWallet API Server REST Specification
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: fbstachura@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface DefaultResponse
 */
export interface DefaultResponse {
  /**
   *
   * @type {DefaultResponseStatusEnum}
   * @memberof DefaultResponse
   */
  status?: DefaultResponseStatusEnum;
  /**
   *
   * @type {string}
   * @memberof DefaultResponse
   */
  message?: string;
}

/**
 *
 * @export
 * @enum {string}
 */

export const DefaultResponseStatusEnum = {
  Ok: 'OK',
  Created: 'CREATED',
  NotFound: 'NOT_FOUND',
  Forbidden: 'FORBIDDEN',
  AlreadyExists: 'ALREADY_EXISTS',
  Unauthorized: 'UNAUTHORIZED',
  InvalidRequest: 'INVALID_REQUEST',
  UnknownError: 'UNKNOWN_ERROR',
  Conflict: 'CONFLICT',
} as const;

export type DefaultResponseStatusEnum =
  (typeof DefaultResponseStatusEnum)[keyof typeof DefaultResponseStatusEnum];

/**
 *
 * @export
 * @interface GetBusinessAccountResponse
 */
export interface GetBusinessAccountResponse {
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  gpsCoordinates?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  bannerImageId?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  iconImageId?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof GetBusinessAccountResponse
   */
  menuImageIds?: Array<string>;
  /**
   *
   * @type {Array<ItemDefinitionAPIModel>}
   * @memberof GetBusinessAccountResponse
   */
  itemDefinitions?: Array<ItemDefinitionAPIModel>;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  nip?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  krs?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  regon?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponse
   */
  ownerName?: string;
}
/**
 *
 * @export
 * @interface GetBusinessAccountResponseAllOf
 */
export interface GetBusinessAccountResponseAllOf {
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponseAllOf
   */
  nip?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponseAllOf
   */
  krs?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponseAllOf
   */
  regon?: string;
  /**
   *
   * @type {string}
   * @memberof GetBusinessAccountResponseAllOf
   */
  ownerName?: string;
}
/**
 *
 * @export
 * @interface GetBusinessItemDefinitionsResponse
 */
export interface GetBusinessItemDefinitionsResponse {
  /**
   *
   * @type {Array<ItemDefinitionAPIModel>}
   * @memberof GetBusinessItemDefinitionsResponse
   */
  itemDefinitions?: Array<ItemDefinitionAPIModel>;
}
/**
 *
 * @export
 * @interface GetBusinessTransactionResponse
 */
export interface GetBusinessTransactionResponse {
  /**
   *
   * @type {string}
   * @memberof GetBusinessTransactionResponse
   */
  publicId?: string;
  /**
   *
   * @type {number}
   * @memberof GetBusinessTransactionResponse
   */
  virtualCardId?: number;
  /**
   *
   * @type {TransactionStateEnum}
   * @memberof GetBusinessTransactionResponse
   */
  state?: TransactionStateEnum;
  /**
   *
   * @type {Array<TransactionItemDetailAPIModel>}
   * @memberof GetBusinessTransactionResponse
   */
  items?: Array<TransactionItemDetailAPIModel>;
}

/**
 *
 * @export
 * @interface GetUserBusinessesSearchResponse
 */
export interface GetUserBusinessesSearchResponse {
  /**
   *
   * @type {Array<ShortBusinessDetailsAPIModel>}
   * @memberof GetUserBusinessesSearchResponse
   */
  businesses?: Array<ShortBusinessDetailsAPIModel>;
}
/**
 *
 * @export
 * @interface GetUserCardsResponse
 */
export interface GetUserCardsResponse {
  /**
   *
   * @type {Array<LocalCardAPIModel>}
   * @memberof GetUserCardsResponse
   */
  localCards?: Array<LocalCardAPIModel>;
  /**
   *
   * @type {Array<ShortVirtualCardAPIModel>}
   * @memberof GetUserCardsResponse
   */
  virtualCards?: Array<ShortVirtualCardAPIModel>;
}
/**
 *
 * @export
 * @interface GetUserLocalCardTypesResponse
 */
export interface GetUserLocalCardTypesResponse {
  /**
   *
   * @type {Array<GetUserLocalCardTypesResponseTypesInner>}
   * @memberof GetUserLocalCardTypesResponse
   */
  types?: Array<GetUserLocalCardTypesResponseTypesInner>;
}
/**
 *
 * @export
 * @interface GetUserLocalCardTypesResponseTypesInner
 */
export interface GetUserLocalCardTypesResponseTypesInner {
  /**
   *
   * @type {string}
   * @memberof GetUserLocalCardTypesResponseTypesInner
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserLocalCardTypesResponseTypesInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserLocalCardTypesResponseTypesInner
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof GetUserLocalCardTypesResponseTypesInner
   */
  imageUrl?: string;
}
/**
 *
 * @export
 * @interface GetUserVirtualCardResponse
 */
export interface GetUserVirtualCardResponse {
  /**
   *
   * @type {number}
   * @memberof GetUserVirtualCardResponse
   */
  points?: number;
  /**
   *
   * @type {Array<OwnedItemAPIModel>}
   * @memberof GetUserVirtualCardResponse
   */
  ownedItems?: Array<OwnedItemAPIModel>;
  /**
   *
   * @type {PublicBusinessDetailsAPIModel}
   * @memberof GetUserVirtualCardResponse
   */
  businessDetails?: PublicBusinessDetailsAPIModel;
}
/**
 *
 * @export
 * @interface GetUserVirtualCardTransactionResponse
 */
export interface GetUserVirtualCardTransactionResponse {
  /**
   *
   * @type {string}
   * @memberof GetUserVirtualCardTransactionResponse
   */
  publicId?: string;
  /**
   *
   * @type {TransactionStateEnum}
   * @memberof GetUserVirtualCardTransactionResponse
   */
  state?: TransactionStateEnum;
  /**
   *
   * @type {number}
   * @memberof GetUserVirtualCardTransactionResponse
   */
  addedPoints?: number;
  /**
   *
   * @type {Array<ItemActionAPIModel>}
   * @memberof GetUserVirtualCardTransactionResponse
   */
  itemActions?: Array<ItemActionAPIModel>;
}

/**
 *
 * @export
 * @interface ItemActionAPIModel
 */
export interface ItemActionAPIModel {
  /**
   *
   * @type {string}
   * @memberof ItemActionAPIModel
   */
  itemId?: string;
  /**
   *
   * @type {ItemActionTypeEnum}
   * @memberof ItemActionAPIModel
   */
  action?: ItemActionTypeEnum;
}

/**
 *
 * @export
 * @enum {string}
 */

export const ItemActionTypeEnum = {
  NoAction: 'NO_ACTION',
  Redeemed: 'REDEEMED',
  Recalled: 'RECALLED',
  Cancelled: 'CANCELLED',
} as const;

export type ItemActionTypeEnum = (typeof ItemActionTypeEnum)[keyof typeof ItemActionTypeEnum];

/**
 *
 * @export
 * @interface ItemDefinitionAPIModel
 */
export interface ItemDefinitionAPIModel {
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof ItemDefinitionAPIModel
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  imageId?: string;
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  startDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof ItemDefinitionAPIModel
   */
  endDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof ItemDefinitionAPIModel
   */
  maxAmount?: number;
  /**
   *
   * @type {boolean}
   * @memberof ItemDefinitionAPIModel
   */
  available?: boolean;
}
/**
 *
 * @export
 * @interface LocalCardAPIModel
 */
export interface LocalCardAPIModel {
  /**
   *
   * @type {string}
   * @memberof LocalCardAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof LocalCardAPIModel
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof LocalCardAPIModel
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof LocalCardAPIModel
   */
  code?: string;
}
/**
 *
 * @export
 * @interface OwnedItemAPIModel
 */
export interface OwnedItemAPIModel {
  /**
   *
   * @type {string}
   * @memberof OwnedItemAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof OwnedItemAPIModel
   */
  definitionId?: string;
}
/**
 *
 * @export
 * @interface PatchBusinessAccountRequest
 */
export interface PatchBusinessAccountRequest {
  /**
   *
   * @type {string}
   * @memberof PatchBusinessAccountRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessAccountRequest
   */
  description?: string;
}
/**
 *
 * @export
 * @interface PatchBusinessItemDefinitionRequest
 */
export interface PatchBusinessItemDefinitionRequest {
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  imageId?: string;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  startDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  endDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  maxAmount?: number;
  /**
   *
   * @type {boolean}
   * @memberof PatchBusinessItemDefinitionRequest
   */
  available?: boolean;
}
/**
 *
 * @export
 * @interface PostAccountEmailConfirmationRequest
 */
export interface PostAccountEmailConfirmationRequest {
  /**
   *
   * @type {string}
   * @memberof PostAccountEmailConfirmationRequest
   */
  token?: string;
}
/**
 *
 * @export
 * @interface PostAccountEmailRequest
 */
export interface PostAccountEmailRequest {
  /**
   *
   * @type {string}
   * @memberof PostAccountEmailRequest
   */
  email?: string;
}
/**
 *
 * @export
 * @interface PostAccountPasswordRequest
 */
export interface PostAccountPasswordRequest {
  /**
   *
   * @type {string}
   * @memberof PostAccountPasswordRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof PostAccountPasswordRequest
   */
  oldPassword?: string;
}
/**
 *
 * @export
 * @interface PostAccountRequest
 */
export interface PostAccountRequest {
  /**
   *
   * @type {string}
   * @memberof PostAccountRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof PostAccountRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface PostAccountResponse
 */
export interface PostAccountResponse {
  /**
   *
   * @type {string}
   * @memberof PostAccountResponse
   */
  token?: string;
}
/**
 *
 * @export
 * @interface PostAccountSessionRequest
 */
export interface PostAccountSessionRequest {
  /**
   *
   * @type {string}
   * @memberof PostAccountSessionRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof PostAccountSessionRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface PostAccountSessionResponse
 */
export interface PostAccountSessionResponse {
  /**
   *
   * @type {string}
   * @memberof PostAccountSessionResponse
   */
  token?: string;
}
/**
 *
 * @export
 * @interface PostBusinessAccountMenuImageResponse
 */
export interface PostBusinessAccountMenuImageResponse {
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountMenuImageResponse
   */
  imageId?: string;
}
/**
 *
 * @export
 * @interface PostBusinessAccountRequest
 */
export interface PostBusinessAccountRequest {
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  gpsCoordinates?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  nip?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  krs?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  regon?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountRequest
   */
  ownerName?: string;
}
/**
 *
 * @export
 * @interface PostBusinessAccountResponse
 */
export interface PostBusinessAccountResponse {
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountResponse
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountResponse
   */
  bannerImageId?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessAccountResponse
   */
  iconImageId?: string;
}
/**
 *
 * @export
 * @interface PostBusinessItemDefinitionRequest
 */
export interface PostBusinessItemDefinitionRequest {
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof PostBusinessItemDefinitionRequest
   */
  price?: number;
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  imageId?: string;
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  startDate?: string | null;
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionRequest
   */
  endDate?: string | null;
  /**
   *
   * @type {number}
   * @memberof PostBusinessItemDefinitionRequest
   */
  maxAmount?: number;
  /**
   *
   * @type {boolean}
   * @memberof PostBusinessItemDefinitionRequest
   */
  available?: boolean;
}
/**
 *
 * @export
 * @interface PostBusinessItemDefinitionResponse
 */
export interface PostBusinessItemDefinitionResponse {
  /**
   *
   * @type {string}
   * @memberof PostBusinessItemDefinitionResponse
   */
  publicId?: string;
}
/**
 *
 * @export
 * @interface PostBusinessTransactionRequest
 */
export interface PostBusinessTransactionRequest {
  /**
   *
   * @type {number}
   * @memberof PostBusinessTransactionRequest
   */
  addedPoints?: number;
  /**
   *
   * @type {Array<ItemActionAPIModel>}
   * @memberof PostBusinessTransactionRequest
   */
  itemActions?: Array<ItemActionAPIModel>;
}
/**
 *
 * @export
 * @interface PostUserLocalCardsRequest
 */
export interface PostUserLocalCardsRequest {
  /**
   *
   * @type {string}
   * @memberof PostUserLocalCardsRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PostUserLocalCardsRequest
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof PostUserLocalCardsRequest
   */
  code?: string;
}
/**
 *
 * @export
 * @interface PostUserLocalCardsResponse
 */
export interface PostUserLocalCardsResponse {
  /**
   *
   * @type {string}
   * @memberof PostUserLocalCardsResponse
   */
  publicId?: string;
}
/**
 *
 * @export
 * @interface PostUserVirtualCardItemResponse
 */
export interface PostUserVirtualCardItemResponse {
  /**
   *
   * @type {string}
   * @memberof PostUserVirtualCardItemResponse
   */
  itemId?: string;
}
/**
 *
 * @export
 * @interface PostUserVirtualCardTransactionRequest
 */
export interface PostUserVirtualCardTransactionRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof PostUserVirtualCardTransactionRequest
   */
  itemIds?: Array<string>;
}
/**
 *
 * @export
 * @interface PostUserVirtualCardTransactionResponse
 */
export interface PostUserVirtualCardTransactionResponse {
  /**
   *
   * @type {string}
   * @memberof PostUserVirtualCardTransactionResponse
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof PostUserVirtualCardTransactionResponse
   */
  Code?: string;
}
/**
 *
 * @export
 * @interface PublicBusinessDetailsAPIModel
 */
export interface PublicBusinessDetailsAPIModel {
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  address?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  gpsCoordinates?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  bannerImageId?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof PublicBusinessDetailsAPIModel
   */
  iconImageId?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof PublicBusinessDetailsAPIModel
   */
  menuImageIds?: Array<string>;
  /**
   *
   * @type {Array<ItemDefinitionAPIModel>}
   * @memberof PublicBusinessDetailsAPIModel
   */
  itemDefinitions?: Array<ItemDefinitionAPIModel>;
}
/**
 *
 * @export
 * @interface ShortBusinessDetailsAPIModel
 */
export interface ShortBusinessDetailsAPIModel {
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  gpsCoordinates?: string;
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  bannerImageId?: string;
  /**
   *
   * @type {string}
   * @memberof ShortBusinessDetailsAPIModel
   */
  iconImageId?: string;
}
/**
 *
 * @export
 * @interface ShortVirtualCardAPIModel
 */
export interface ShortVirtualCardAPIModel {
  /**
   *
   * @type {ShortBusinessDetailsAPIModel}
   * @memberof ShortVirtualCardAPIModel
   */
  businessDetails?: ShortBusinessDetailsAPIModel;
  /**
   *
   * @type {number}
   * @memberof ShortVirtualCardAPIModel
   */
  points?: number;
}
/**
 *
 * @export
 * @interface TransactionItemDetailAPIModel
 */
export interface TransactionItemDetailAPIModel {
  /**
   *
   * @type {string}
   * @memberof TransactionItemDetailAPIModel
   */
  publicId?: string;
  /**
   *
   * @type {string}
   * @memberof TransactionItemDetailAPIModel
   */
  itemDefinitionId?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const TransactionStateEnum = {
  Started: 'STARTED',
  Processing: 'PROCESSING',
  Finished: 'FINISHED',
  Expired: 'EXPIRED',
  Failed: 'FAILED',
} as const;

export type TransactionStateEnum = (typeof TransactionStateEnum)[keyof typeof TransactionStateEnum];

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint can be used to change email address of currently logged in user. Changing email address requires email confirmation
     * @summary Change email
     * @param {PostAccountEmailRequest} postAccountEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmail: async (
      postAccountEmailRequest: PostAccountEmailRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAccountEmailRequest' is not null or undefined
      assertParamExists('changeEmail', 'postAccountEmailRequest', postAccountEmailRequest);
      const localVarPath = `/auth/account/email`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAccountEmailRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint can be used to change password of currently logged in user. Requires the user to provide their old password
     * @summary Change password
     * @param {DefaultResponse} defaultResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword: async (
      defaultResponse: DefaultResponse,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'defaultResponse' is not null or undefined
      assertParamExists('changePassword', 'defaultResponse', defaultResponse);
      const localVarPath = `/auth/account/password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        defaultResponse,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * When an account is created, user receives an email with a link to a static website. That website simply posts it\'s parameters (unique to each email) to this endpoint. The parameters will be unique and hard to guess, allowing to verify that user really has access to the email address.
     * @summary Confirm email
     * @param {PostAccountEmailConfirmationRequest} postAccountEmailConfirmationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmail: async (
      postAccountEmailConfirmationRequest: PostAccountEmailConfirmationRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAccountEmailConfirmationRequest' is not null or undefined
      assertParamExists(
        'confirmEmail',
        'postAccountEmailConfirmationRequest',
        postAccountEmailConfirmationRequest
      );
      const localVarPath = `/auth/account/emailConfirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAccountEmailConfirmationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a new account with specified password and email, send a confirmation email
     * @summary Create a new account
     * @param {PostAccountRequest} postAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: async (
      postAccountRequest: PostAccountRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAccountRequest' is not null or undefined
      assertParamExists('createAccount', 'postAccountRequest', postAccountRequest);
      const localVarPath = `/auth/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAccountRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint can be used to change email address of currently logged in user. Changing email address requires email confirmation
     * @summary Change email
     * @param {PostAccountEmailRequest} postAccountEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changeEmail(
      postAccountEmailRequest: PostAccountEmailRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changeEmail(
        postAccountEmailRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint can be used to change password of currently logged in user. Requires the user to provide their old password
     * @summary Change password
     * @param {DefaultResponse} defaultResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePassword(
      defaultResponse: DefaultResponse,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(
        defaultResponse,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * When an account is created, user receives an email with a link to a static website. That website simply posts it\'s parameters (unique to each email) to this endpoint. The parameters will be unique and hard to guess, allowing to verify that user really has access to the email address.
     * @summary Confirm email
     * @param {PostAccountEmailConfirmationRequest} postAccountEmailConfirmationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async confirmEmail(
      postAccountEmailConfirmationRequest: PostAccountEmailConfirmationRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAccountResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.confirmEmail(
        postAccountEmailConfirmationRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Create a new account with specified password and email, send a confirmation email
     * @summary Create a new account
     * @param {PostAccountRequest} postAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccount(
      postAccountRequest: PostAccountRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAccountResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(
        postAccountRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     * This endpoint can be used to change email address of currently logged in user. Changing email address requires email confirmation
     * @summary Change email
     * @param {PostAccountEmailRequest} postAccountEmailRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeEmail(
      postAccountEmailRequest: PostAccountEmailRequest,
      options?: any
    ): AxiosPromise<DefaultResponse> {
      return localVarFp
        .changeEmail(postAccountEmailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint can be used to change password of currently logged in user. Requires the user to provide their old password
     * @summary Change password
     * @param {DefaultResponse} defaultResponse
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(defaultResponse: DefaultResponse, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .changePassword(defaultResponse, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * When an account is created, user receives an email with a link to a static website. That website simply posts it\'s parameters (unique to each email) to this endpoint. The parameters will be unique and hard to guess, allowing to verify that user really has access to the email address.
     * @summary Confirm email
     * @param {PostAccountEmailConfirmationRequest} postAccountEmailConfirmationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    confirmEmail(
      postAccountEmailConfirmationRequest: PostAccountEmailConfirmationRequest,
      options?: any
    ): AxiosPromise<PostAccountResponse> {
      return localVarFp
        .confirmEmail(postAccountEmailConfirmationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a new account with specified password and email, send a confirmation email
     * @summary Create a new account
     * @param {PostAccountRequest} postAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(
      postAccountRequest: PostAccountRequest,
      options?: any
    ): AxiosPromise<PostAccountResponse> {
      return localVarFp
        .createAccount(postAccountRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   * This endpoint can be used to change email address of currently logged in user. Changing email address requires email confirmation
   * @summary Change email
   * @param {PostAccountEmailRequest} postAccountEmailRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public changeEmail(
    postAccountEmailRequest: PostAccountEmailRequest,
    options?: AxiosRequestConfig
  ) {
    return AccountApiFp(this.configuration)
      .changeEmail(postAccountEmailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint can be used to change password of currently logged in user. Requires the user to provide their old password
   * @summary Change password
   * @param {DefaultResponse} defaultResponse
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public changePassword(defaultResponse: DefaultResponse, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .changePassword(defaultResponse, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * When an account is created, user receives an email with a link to a static website. That website simply posts it\'s parameters (unique to each email) to this endpoint. The parameters will be unique and hard to guess, allowing to verify that user really has access to the email address.
   * @summary Confirm email
   * @param {PostAccountEmailConfirmationRequest} postAccountEmailConfirmationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public confirmEmail(
    postAccountEmailConfirmationRequest: PostAccountEmailConfirmationRequest,
    options?: AxiosRequestConfig
  ) {
    return AccountApiFp(this.configuration)
      .confirmEmail(postAccountEmailConfirmationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a new account with specified password and email, send a confirmation email
   * @summary Create a new account
   * @param {PostAccountRequest} postAccountRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public createAccount(postAccountRequest: PostAccountRequest, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .createAccount(postAccountRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * BusinessApi - axios parameter creator
 * @export
 */
export const BusinessApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to add a new menu image to business details. Returns a new fileId to be used with \'/file/\' endpoints.
     * @summary Add menu image to business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMenuImage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/business/menuImages/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to attach a new business account to an existing, logged in user account. Busies details are provided in the request. Responds with business id and ids of banner and icon image slots.
     * @summary Create a business account
     * @param {PostBusinessAccountRequest} postBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessAccount: async (
      postBusinessAccountRequest: PostBusinessAccountRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postBusinessAccountRequest' is not null or undefined
      assertParamExists(
        'createBusinessAccount',
        'postBusinessAccountRequest',
        postBusinessAccountRequest
      );
      const localVarPath = `/business/account`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBusinessAccountRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to delete a menu image from business details.
     * @summary Delete menu image from business
     * @param {string} menuImageId Public id of the menu image to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMenuImage: async (
      menuImageId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'menuImageId' is not null or undefined
      assertParamExists('deleteMenuImage', 'menuImageId', menuImageId);
      const localVarPath = `/business/menuImages/{menuImageId}`.replace(
        `{${'menuImageId'}}`,
        encodeURIComponent(String(menuImageId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Responds with information about business owned by the logged in user.
     * @summary Get business info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/business/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to update business account data
     * @summary Update business account
     * @param {PatchBusinessAccountRequest} patchBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBusinessAccount: async (
      patchBusinessAccountRequest: PatchBusinessAccountRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'patchBusinessAccountRequest' is not null or undefined
      assertParamExists(
        'updateBusinessAccount',
        'patchBusinessAccountRequest',
        patchBusinessAccountRequest
      );
      const localVarPath = `/business/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchBusinessAccountRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * BusinessApi - functional programming interface
 * @export
 */
export const BusinessApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = BusinessApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to add a new menu image to business details. Returns a new fileId to be used with \'/file/\' endpoints.
     * @summary Add menu image to business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addMenuImage(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostBusinessAccountMenuImageResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addMenuImage(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to attach a new business account to an existing, logged in user account. Busies details are provided in the request. Responds with business id and ids of banner and icon image slots.
     * @summary Create a business account
     * @param {PostBusinessAccountRequest} postBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBusinessAccount(
      postBusinessAccountRequest: PostBusinessAccountRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessAccountResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBusinessAccount(
        postBusinessAccountRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to delete a menu image from business details.
     * @summary Delete menu image from business
     * @param {string} menuImageId Public id of the menu image to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMenuImage(
      menuImageId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMenuImage(
        menuImageId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Responds with information about business owned by the logged in user.
     * @summary Get business info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusinessAccountInfo(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessAccountResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessAccountInfo(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to update business account data
     * @summary Update business account
     * @param {PatchBusinessAccountRequest} patchBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateBusinessAccount(
      patchBusinessAccountRequest: PatchBusinessAccountRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateBusinessAccount(
        patchBusinessAccountRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * BusinessApi - factory interface
 * @export
 */
export const BusinessApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = BusinessApiFp(configuration);
  return {
    /**
     * This endpoint is used to add a new menu image to business details. Returns a new fileId to be used with \'/file/\' endpoints.
     * @summary Add menu image to business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMenuImage(options?: any): AxiosPromise<PostBusinessAccountMenuImageResponse> {
      return localVarFp.addMenuImage(options).then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to attach a new business account to an existing, logged in user account. Busies details are provided in the request. Responds with business id and ids of banner and icon image slots.
     * @summary Create a business account
     * @param {PostBusinessAccountRequest} postBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBusinessAccount(
      postBusinessAccountRequest: PostBusinessAccountRequest,
      options?: any
    ): AxiosPromise<PostBusinessAccountResponse> {
      return localVarFp
        .createBusinessAccount(postBusinessAccountRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to delete a menu image from business details.
     * @summary Delete menu image from business
     * @param {string} menuImageId Public id of the menu image to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMenuImage(menuImageId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .deleteMenuImage(menuImageId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Responds with information about business owned by the logged in user.
     * @summary Get business info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusinessAccountInfo(options?: any): AxiosPromise<GetBusinessAccountResponse> {
      return localVarFp.getBusinessAccountInfo(options).then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to update business account data
     * @summary Update business account
     * @param {PatchBusinessAccountRequest} patchBusinessAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateBusinessAccount(
      patchBusinessAccountRequest: PatchBusinessAccountRequest,
      options?: any
    ): AxiosPromise<DefaultResponse> {
      return localVarFp
        .updateBusinessAccount(patchBusinessAccountRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * BusinessApi - object-oriented interface
 * @export
 * @class BusinessApi
 * @extends {BaseAPI}
 */
export class BusinessApi extends BaseAPI {
  /**
   * This endpoint is used to add a new menu image to business details. Returns a new fileId to be used with \'/file/\' endpoints.
   * @summary Add menu image to business
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessApi
   */
  public addMenuImage(options?: AxiosRequestConfig) {
    return BusinessApiFp(this.configuration)
      .addMenuImage(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to attach a new business account to an existing, logged in user account. Busies details are provided in the request. Responds with business id and ids of banner and icon image slots.
   * @summary Create a business account
   * @param {PostBusinessAccountRequest} postBusinessAccountRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessApi
   */
  public createBusinessAccount(
    postBusinessAccountRequest: PostBusinessAccountRequest,
    options?: AxiosRequestConfig
  ) {
    return BusinessApiFp(this.configuration)
      .createBusinessAccount(postBusinessAccountRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to delete a menu image from business details.
   * @summary Delete menu image from business
   * @param {string} menuImageId Public id of the menu image to be deleted
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessApi
   */
  public deleteMenuImage(menuImageId: string, options?: AxiosRequestConfig) {
    return BusinessApiFp(this.configuration)
      .deleteMenuImage(menuImageId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Responds with information about business owned by the logged in user.
   * @summary Get business info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessApi
   */
  public getBusinessAccountInfo(options?: AxiosRequestConfig) {
    return BusinessApiFp(this.configuration)
      .getBusinessAccountInfo(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to update business account data
   * @summary Update business account
   * @param {PatchBusinessAccountRequest} patchBusinessAccountRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof BusinessApi
   */
  public updateBusinessAccount(
    patchBusinessAccountRequest: PatchBusinessAccountRequest,
    options?: AxiosRequestConfig
  ) {
    return BusinessApiFp(this.configuration)
      .updateBusinessAccount(patchBusinessAccountRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CardsApi - axios parameter creator
 * @export
 */
export const CardsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to retrieve a list of currently logged in user\'s cards.
     * @summary Get list of user\'s cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCards: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user/cards`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CardsApi - functional programming interface
 * @export
 */
export const CardsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CardsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to retrieve a list of currently logged in user\'s cards.
     * @summary Get list of user\'s cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserCards(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserCardsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserCards(options);
      console.log(localVarAxiosArgs);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CardsApi - factory interface
 * @export
 */
export const CardsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CardsApiFp(configuration);
  return {
    /**
     * This endpoint is used to retrieve a list of currently logged in user\'s cards.
     * @summary Get list of user\'s cards
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserCards(options?: any): AxiosPromise<GetUserCardsResponse> {
      return localVarFp.getUserCards(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * CardsApi - object-oriented interface
 * @export
 * @class CardsApi
 * @extends {BaseAPI}
 */
export class CardsApi extends BaseAPI {
  /**
   * This endpoint is used to retrieve a list of currently logged in user\'s cards.
   * @summary Get list of user\'s cards
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CardsApi
   */
  public getUserCards(options?: AxiosRequestConfig) {
    return CardsApiFp(this.configuration)
      .getUserCards(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FileApi - axios parameter creator
 * @export
 */
export const FileApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to delete files.
     * @summary Delete a file
     * @param {string} fileId ID of file to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('deleteFile', 'fileId', fileId);
      const localVarPath = `/file/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to download files by ID.
     * @summary Get file
     * @param {string} fileId ID of file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile: async (fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('getFile', 'fileId', fileId);
      const localVarPath = `/file/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to upload files.
     * @summary Upload file
     * @param {string} fileId ID of file to upload/replace
     * @param {File} body File data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile: async (
      fileId: string,
      body: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'fileId' is not null or undefined
      assertParamExists('uploadFile', 'fileId', fileId);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('uploadFile', 'body', body);
      const localVarPath = `/file/{fileId}`.replace(
        `{${'fileId'}}`,
        encodeURIComponent(String(fileId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'image/png';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FileApi - functional programming interface
 * @export
 */
export const FileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FileApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to delete files.
     * @summary Delete a file
     * @param {string} fileId ID of file to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFile(
      fileId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to download files by ID.
     * @summary Get file
     * @param {string} fileId ID of file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFile(
      fileId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to upload files.
     * @summary Upload file
     * @param {string} fileId ID of file to upload/replace
     * @param {File} body File data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFile(
      fileId: string,
      body: File,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(fileId, body, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * FileApi - factory interface
 * @export
 */
export const FileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FileApiFp(configuration);
  return {
    /**
     * This endpoint is used to delete files.
     * @summary Delete a file
     * @param {string} fileId ID of file to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to download files by ID.
     * @summary Get file
     * @param {string} fileId ID of file to download
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileId: string, options?: any): AxiosPromise<File> {
      return localVarFp.getFile(fileId, options).then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to upload files.
     * @summary Upload file
     * @param {string} fileId ID of file to upload/replace
     * @param {File} body File data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(fileId: string, body: File, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .uploadFile(fileId, body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export class FileApi extends BaseAPI {
  /**
   * This endpoint is used to delete files.
   * @summary Delete a file
   * @param {string} fileId ID of file to delete
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public deleteFile(fileId: string, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .deleteFile(fileId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to download files by ID.
   * @summary Get file
   * @param {string} fileId ID of file to download
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public getFile(fileId: string, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .getFile(fileId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to upload files.
   * @summary Upload file
   * @param {string} fileId ID of file to upload/replace
   * @param {File} body File data
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FileApi
   */
  public uploadFile(fileId: string, body: File, options?: AxiosRequestConfig) {
    return FileApiFp(this.configuration)
      .uploadFile(fileId, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ItemDefinitionsApi - axios parameter creator
 * @export
 */
export const ItemDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to add new item definitions (benefits).
     * @summary Add a new item definition
     * @param {PostBusinessItemDefinitionRequest} postBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemDefinition: async (
      postBusinessItemDefinitionRequest: PostBusinessItemDefinitionRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postBusinessItemDefinitionRequest' is not null or undefined
      assertParamExists(
        'addItemDefinition',
        'postBusinessItemDefinitionRequest',
        postBusinessItemDefinitionRequest
      );
      const localVarPath = `/business/itemDefinitions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBusinessItemDefinitionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to delete existing item definitions (benefits).
     * @summary Delete an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemDefinition: async (
      definitionId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'definitionId' is not null or undefined
      assertParamExists('deleteItemDefinition', 'definitionId', definitionId);
      const localVarPath = `/business/itemDefinitions/{definitionId}`.replace(
        `{${'definitionId'}}`,
        encodeURIComponent(String(definitionId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to retrieve data about existing item definitions (benefits).
     * @summary Get list of item definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemDefinitions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/business/itemDefinitions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to change details of existing item definitions (benefits).
     * @summary Update an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {PatchBusinessItemDefinitionRequest} patchBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemDefinition: async (
      definitionId: string,
      patchBusinessItemDefinitionRequest: PatchBusinessItemDefinitionRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'definitionId' is not null or undefined
      assertParamExists('updateItemDefinition', 'definitionId', definitionId);
      // verify required parameter 'patchBusinessItemDefinitionRequest' is not null or undefined
      assertParamExists(
        'updateItemDefinition',
        'patchBusinessItemDefinitionRequest',
        patchBusinessItemDefinitionRequest
      );
      const localVarPath = `/business/itemDefinitions/{definitionId}`.replace(
        `{${'definitionId'}}`,
        encodeURIComponent(String(definitionId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchBusinessItemDefinitionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ItemDefinitionsApi - functional programming interface
 * @export
 */
export const ItemDefinitionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ItemDefinitionsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to add new item definitions (benefits).
     * @summary Add a new item definition
     * @param {PostBusinessItemDefinitionRequest} postBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addItemDefinition(
      postBusinessItemDefinitionRequest: PostBusinessItemDefinitionRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostBusinessItemDefinitionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addItemDefinition(
        postBusinessItemDefinitionRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to delete existing item definitions (benefits).
     * @summary Delete an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItemDefinition(
      definitionId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItemDefinition(
        definitionId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to retrieve data about existing item definitions (benefits).
     * @summary Get list of item definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getItemDefinitions(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessItemDefinitionsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getItemDefinitions(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to change details of existing item definitions (benefits).
     * @summary Update an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {PatchBusinessItemDefinitionRequest} patchBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateItemDefinition(
      definitionId: string,
      patchBusinessItemDefinitionRequest: PatchBusinessItemDefinitionRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemDefinition(
        definitionId,
        patchBusinessItemDefinitionRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * ItemDefinitionsApi - factory interface
 * @export
 */
export const ItemDefinitionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ItemDefinitionsApiFp(configuration);
  return {
    /**
     * This endpoint is used to add new item definitions (benefits).
     * @summary Add a new item definition
     * @param {PostBusinessItemDefinitionRequest} postBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addItemDefinition(
      postBusinessItemDefinitionRequest: PostBusinessItemDefinitionRequest,
      options?: any
    ): AxiosPromise<PostBusinessItemDefinitionResponse> {
      return localVarFp
        .addItemDefinition(postBusinessItemDefinitionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to delete existing item definitions (benefits).
     * @summary Delete an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItemDefinition(definitionId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .deleteItemDefinition(definitionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to retrieve data about existing item definitions (benefits).
     * @summary Get list of item definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getItemDefinitions(options?: any): AxiosPromise<GetBusinessItemDefinitionsResponse> {
      return localVarFp.getItemDefinitions(options).then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to change details of existing item definitions (benefits).
     * @summary Update an exiting item definition
     * @param {string} definitionId Public id of the definition to update
     * @param {PatchBusinessItemDefinitionRequest} patchBusinessItemDefinitionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateItemDefinition(
      definitionId: string,
      patchBusinessItemDefinitionRequest: PatchBusinessItemDefinitionRequest,
      options?: any
    ): AxiosPromise<DefaultResponse> {
      return localVarFp
        .updateItemDefinition(definitionId, patchBusinessItemDefinitionRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ItemDefinitionsApi - object-oriented interface
 * @export
 * @class ItemDefinitionsApi
 * @extends {BaseAPI}
 */
export class ItemDefinitionsApi extends BaseAPI {
  /**
   * This endpoint is used to add new item definitions (benefits).
   * @summary Add a new item definition
   * @param {PostBusinessItemDefinitionRequest} postBusinessItemDefinitionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemDefinitionsApi
   */
  public addItemDefinition(
    postBusinessItemDefinitionRequest: PostBusinessItemDefinitionRequest,
    options?: AxiosRequestConfig
  ) {
    return ItemDefinitionsApiFp(this.configuration)
      .addItemDefinition(postBusinessItemDefinitionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to delete existing item definitions (benefits).
   * @summary Delete an exiting item definition
   * @param {string} definitionId Public id of the definition to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemDefinitionsApi
   */
  public deleteItemDefinition(definitionId: string, options?: AxiosRequestConfig) {
    return ItemDefinitionsApiFp(this.configuration)
      .deleteItemDefinition(definitionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to retrieve data about existing item definitions (benefits).
   * @summary Get list of item definitions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemDefinitionsApi
   */
  public getItemDefinitions(options?: AxiosRequestConfig) {
    return ItemDefinitionsApiFp(this.configuration)
      .getItemDefinitions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to change details of existing item definitions (benefits).
   * @summary Update an exiting item definition
   * @param {string} definitionId Public id of the definition to update
   * @param {PatchBusinessItemDefinitionRequest} patchBusinessItemDefinitionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemDefinitionsApi
   */
  public updateItemDefinition(
    definitionId: string,
    patchBusinessItemDefinitionRequest: PatchBusinessItemDefinitionRequest,
    options?: AxiosRequestConfig
  ) {
    return ItemDefinitionsApiFp(this.configuration)
      .updateItemDefinition(definitionId, patchBusinessItemDefinitionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * LocalCardsApi - axios parameter creator
 * @export
 */
export const LocalCardsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to add a new local card to user\'s account.
     * @summary Add a new local card
     * @param {PostUserLocalCardsRequest} postUserLocalCardsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocalCard: async (
      postUserLocalCardsRequest: PostUserLocalCardsRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postUserLocalCardsRequest' is not null or undefined
      assertParamExists('createLocalCard', 'postUserLocalCardsRequest', postUserLocalCardsRequest);
      const localVarPath = `/user/cards/local`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserLocalCardsRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to delete a local card from account of the currently logged in user.
     * @summary Delete a local card
     * @param {string} cardId Public id of the card to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLocalCard: async (
      cardId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'cardId' is not null or undefined
      assertParamExists('deleteLocalCard', 'cardId', cardId);
      const localVarPath = `/user/cards/local/{cardId}`.replace(
        `{${'cardId'}}`,
        encodeURIComponent(String(cardId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to get a list of supported local card types.
     * @summary Get list of local card types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocalCardTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/user/cards/local/types`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * LocalCardsApi - functional programming interface
 * @export
 */
export const LocalCardsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LocalCardsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to add a new local card to user\'s account.
     * @summary Add a new local card
     * @param {PostUserLocalCardsRequest} postUserLocalCardsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createLocalCard(
      postUserLocalCardsRequest: PostUserLocalCardsRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserLocalCardsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createLocalCard(
        postUserLocalCardsRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to delete a local card from account of the currently logged in user.
     * @summary Delete a local card
     * @param {string} cardId Public id of the card to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteLocalCard(
      cardId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLocalCard(cardId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to get a list of supported local card types.
     * @summary Get list of local card types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getLocalCardTypes(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserLocalCardTypesResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getLocalCardTypes(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * LocalCardsApi - factory interface
 * @export
 */
export const LocalCardsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LocalCardsApiFp(configuration);
  return {
    /**
     * This endpoint is used to add a new local card to user\'s account.
     * @summary Add a new local card
     * @param {PostUserLocalCardsRequest} postUserLocalCardsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createLocalCard(
      postUserLocalCardsRequest: PostUserLocalCardsRequest,
      options?: any
    ): AxiosPromise<PostUserLocalCardsResponse> {
      return localVarFp
        .createLocalCard(postUserLocalCardsRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to delete a local card from account of the currently logged in user.
     * @summary Delete a local card
     * @param {string} cardId Public id of the card to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteLocalCard(cardId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .deleteLocalCard(cardId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to get a list of supported local card types.
     * @summary Get list of local card types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocalCardTypes(options?: any): AxiosPromise<GetUserLocalCardTypesResponse> {
      return localVarFp.getLocalCardTypes(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * LocalCardsApi - object-oriented interface
 * @export
 * @class LocalCardsApi
 * @extends {BaseAPI}
 */
export class LocalCardsApi extends BaseAPI {
  /**
   * This endpoint is used to add a new local card to user\'s account.
   * @summary Add a new local card
   * @param {PostUserLocalCardsRequest} postUserLocalCardsRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocalCardsApi
   */
  public createLocalCard(
    postUserLocalCardsRequest: PostUserLocalCardsRequest,
    options?: AxiosRequestConfig
  ) {
    return LocalCardsApiFp(this.configuration)
      .createLocalCard(postUserLocalCardsRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to delete a local card from account of the currently logged in user.
   * @summary Delete a local card
   * @param {string} cardId Public id of the card to delete
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocalCardsApi
   */
  public deleteLocalCard(cardId: string, options?: AxiosRequestConfig) {
    return LocalCardsApiFp(this.configuration)
      .deleteLocalCard(cardId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to get a list of supported local card types.
   * @summary Get list of local card types
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LocalCardsApi
   */
  public getLocalCardTypes(options?: AxiosRequestConfig) {
    return LocalCardsApiFp(this.configuration)
      .getLocalCardTypes(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SessionsApi - axios parameter creator
 * @export
 */
export const SessionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to exchange user credentials for temporary credentials that allow access to the API.
     * @summary Login
     * @param {PostAccountSessionRequest} postAccountSessionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      postAccountSessionRequest: PostAccountSessionRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postAccountSessionRequest' is not null or undefined
      assertParamExists('login', 'postAccountSessionRequest', postAccountSessionRequest);
      const localVarPath = `/auth/sessions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postAccountSessionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint invalidates session token passed with the request.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/sessions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SessionsApi - functional programming interface
 * @export
 */
export const SessionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SessionsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to exchange user credentials for temporary credentials that allow access to the API.
     * @summary Login
     * @param {PostAccountSessionRequest} postAccountSessionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      postAccountSessionRequest: PostAccountSessionRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostAccountSessionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        postAccountSessionRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint invalidates session token passed with the request.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * SessionsApi - factory interface
 * @export
 */
export const SessionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SessionsApiFp(configuration);
  return {
    /**
     * This endpoint is used to exchange user credentials for temporary credentials that allow access to the API.
     * @summary Login
     * @param {PostAccountSessionRequest} postAccountSessionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      postAccountSessionRequest: PostAccountSessionRequest,
      options?: any
    ): AxiosPromise<PostAccountSessionResponse> {
      return localVarFp
        .login(postAccountSessionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint invalidates session token passed with the request.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp.logout(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export class SessionsApi extends BaseAPI {
  /**
   * This endpoint is used to exchange user credentials for temporary credentials that allow access to the API.
   * @summary Login
   * @param {PostAccountSessionRequest} postAccountSessionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApi
   */
  public login(postAccountSessionRequest: PostAccountSessionRequest, options?: AxiosRequestConfig) {
    return SessionsApiFp(this.configuration)
      .login(postAccountSessionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint invalidates session token passed with the request.
   * @summary Logout
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApi
   */
  public logout(options?: AxiosRequestConfig) {
    return SessionsApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used in the last step of transaction processing, it\'s used to check the status of the transaction.
     * @summary Get info about a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} transactionCode Transaction code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionStatus: async (
      businessId: string,
      transactionCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('getTransactionStatus', 'businessId', businessId);
      // verify required parameter 'transactionCode' is not null or undefined
      assertParamExists('getTransactionStatus', 'transactionCode', transactionCode);
      const localVarPath = `/user/cards/virtual/{businessId}/transactions/{transactionCode}`
        .replace(`{${'businessId'}}`, encodeURIComponent(String(businessId)))
        .replace(`{${'transactionCode'}}`, encodeURIComponent(String(transactionCode)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used in the first step of transaction processing, the app should use it to start a transaction optionally providing items to be exchanged.
     * @summary Start a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {PostUserVirtualCardTransactionRequest} postUserVirtualCardTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startTransaction: async (
      businessId: string,
      postUserVirtualCardTransactionRequest: PostUserVirtualCardTransactionRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('startTransaction', 'businessId', businessId);
      // verify required parameter 'postUserVirtualCardTransactionRequest' is not null or undefined
      assertParamExists(
        'startTransaction',
        'postUserVirtualCardTransactionRequest',
        postUserVirtualCardTransactionRequest
      );
      const localVarPath = `/user/cards/virtual/{businessId}/transactions`.replace(
        `{${'businessId'}}`,
        encodeURIComponent(String(businessId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postUserVirtualCardTransactionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used in the last step of transaction processing, it\'s used to check the status of the transaction.
     * @summary Get info about a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} transactionCode Transaction code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactionStatus(
      businessId: string,
      transactionCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<GetUserVirtualCardTransactionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionStatus(
        businessId,
        transactionCode,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used in the first step of transaction processing, the app should use it to start a transaction optionally providing items to be exchanged.
     * @summary Start a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {PostUserVirtualCardTransactionRequest} postUserVirtualCardTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startTransaction(
      businessId: string,
      postUserVirtualCardTransactionRequest: PostUserVirtualCardTransactionRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<PostUserVirtualCardTransactionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startTransaction(
        businessId,
        postUserVirtualCardTransactionRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TransactionApiFp(configuration);
  return {
    /**
     * This endpoint is used in the last step of transaction processing, it\'s used to check the status of the transaction.
     * @summary Get info about a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} transactionCode Transaction code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionStatus(
      businessId: string,
      transactionCode: string,
      options?: any
    ): AxiosPromise<GetUserVirtualCardTransactionResponse> {
      return localVarFp
        .getTransactionStatus(businessId, transactionCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used in the first step of transaction processing, the app should use it to start a transaction optionally providing items to be exchanged.
     * @summary Start a transaction
     * @param {string} businessId Public ID of the business which card was requested
     * @param {PostUserVirtualCardTransactionRequest} postUserVirtualCardTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startTransaction(
      businessId: string,
      postUserVirtualCardTransactionRequest: PostUserVirtualCardTransactionRequest,
      options?: any
    ): AxiosPromise<PostUserVirtualCardTransactionResponse> {
      return localVarFp
        .startTransaction(businessId, postUserVirtualCardTransactionRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
  /**
   * This endpoint is used in the last step of transaction processing, it\'s used to check the status of the transaction.
   * @summary Get info about a transaction
   * @param {string} businessId Public ID of the business which card was requested
   * @param {string} transactionCode Transaction code
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionApi
   */
  public getTransactionStatus(
    businessId: string,
    transactionCode: string,
    options?: AxiosRequestConfig
  ) {
    return TransactionApiFp(this.configuration)
      .getTransactionStatus(businessId, transactionCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used in the first step of transaction processing, the app should use it to start a transaction optionally providing items to be exchanged.
   * @summary Start a transaction
   * @param {string} businessId Public ID of the business which card was requested
   * @param {PostUserVirtualCardTransactionRequest} postUserVirtualCardTransactionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionApi
   */
  public startTransaction(
    businessId: string,
    postUserVirtualCardTransactionRequest: PostUserVirtualCardTransactionRequest,
    options?: AxiosRequestConfig
  ) {
    return TransactionApiFp(this.configuration)
      .startTransaction(businessId, postUserVirtualCardTransactionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used in the third step of transaction processing, the app should use it to update transaction details with data about points added to user\'s account and actions that were taken on items included in the transaction.
     * @summary Finish a transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {PostBusinessTransactionRequest} postBusinessTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishTransaction: async (
      transactionCode: string,
      postBusinessTransactionRequest: PostBusinessTransactionRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'transactionCode' is not null or undefined
      assertParamExists('finishTransaction', 'transactionCode', transactionCode);
      // verify required parameter 'postBusinessTransactionRequest' is not null or undefined
      assertParamExists(
        'finishTransaction',
        'postBusinessTransactionRequest',
        postBusinessTransactionRequest
      );
      const localVarPath = `/business/transactions/{transactionCode}`.replace(
        `{${'transactionCode'}}`,
        encodeURIComponent(String(transactionCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postBusinessTransactionRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used in the second step of transaction processing, the app should use it to retrieve details about a transaction started by a user, after scanning user\'s transaction code.
     * @summary Get info about a started transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionDetails: async (
      transactionCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'transactionCode' is not null or undefined
      assertParamExists('getTransactionDetails', 'transactionCode', transactionCode);
      const localVarPath = `/business/transactions/{transactionCode}`.replace(
        `{${'transactionCode'}}`,
        encodeURIComponent(String(transactionCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used in the third step of transaction processing, the app should use it to update transaction details with data about points added to user\'s account and actions that were taken on items included in the transaction.
     * @summary Finish a transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {PostBusinessTransactionRequest} postBusinessTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async finishTransaction(
      transactionCode: string,
      postBusinessTransactionRequest: PostBusinessTransactionRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.finishTransaction(
        transactionCode,
        postBusinessTransactionRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used in the second step of transaction processing, the app should use it to retrieve details about a transaction started by a user, after scanning user\'s transaction code.
     * @summary Get info about a started transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransactionDetails(
      transactionCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBusinessTransactionResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionDetails(
        transactionCode,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = TransactionsApiFp(configuration);
  return {
    /**
     * This endpoint is used in the third step of transaction processing, the app should use it to update transaction details with data about points added to user\'s account and actions that were taken on items included in the transaction.
     * @summary Finish a transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {PostBusinessTransactionRequest} postBusinessTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    finishTransaction(
      transactionCode: string,
      postBusinessTransactionRequest: PostBusinessTransactionRequest,
      options?: any
    ): AxiosPromise<DefaultResponse> {
      return localVarFp
        .finishTransaction(transactionCode, postBusinessTransactionRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used in the second step of transaction processing, the app should use it to retrieve details about a transaction started by a user, after scanning user\'s transaction code.
     * @summary Get info about a started transaction
     * @param {string} transactionCode Transaction code (scanned or typed in)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionDetails(
      transactionCode: string,
      options?: any
    ): AxiosPromise<GetBusinessTransactionResponse> {
      return localVarFp
        .getTransactionDetails(transactionCode, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
  /**
   * This endpoint is used in the third step of transaction processing, the app should use it to update transaction details with data about points added to user\'s account and actions that were taken on items included in the transaction.
   * @summary Finish a transaction
   * @param {string} transactionCode Transaction code (scanned or typed in)
   * @param {PostBusinessTransactionRequest} postBusinessTransactionRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public finishTransaction(
    transactionCode: string,
    postBusinessTransactionRequest: PostBusinessTransactionRequest,
    options?: AxiosRequestConfig
  ) {
    return TransactionsApiFp(this.configuration)
      .finishTransaction(transactionCode, postBusinessTransactionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used in the second step of transaction processing, the app should use it to retrieve details about a transaction started by a user, after scanning user\'s transaction code.
   * @summary Get info about a started transaction
   * @param {string} transactionCode Transaction code (scanned or typed in)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionsApi
   */
  public getTransactionDetails(transactionCode: string, options?: AxiosRequestConfig) {
    return TransactionsApiFp(this.configuration)
      .getTransactionDetails(transactionCode, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to get info about a business
     * @summary Get business info
     * @param {string} businessId Public id of the business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusiness: async (
      businessId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('getBusiness', 'businessId', businessId);
      const localVarPath = `/user/businesses/{businessId}`.replace(
        `{${'businessId'}}`,
        encodeURIComponent(String(businessId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to search businesses that match the provided text query or are close to a specified point.
     * @summary Search businesses
     * @param {string} [text] Filter by business name
     * @param {string} [location] Filter by business location
     * @param {number} [proximity] Filter by distance from location in meters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBusinesses: async (
      text?: string,
      location?: string,
      proximity?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user/businesses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (text !== undefined) {
        localVarQueryParameter['text'] = text;
      }

      if (location !== undefined) {
        localVarQueryParameter['location'] = location;
      }

      if (proximity !== undefined) {
        localVarQueryParameter['proximity'] = proximity;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to get info about a business
     * @summary Get business info
     * @param {string} businessId Public id of the business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBusiness(
      businessId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicBusinessDetailsAPIModel>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBusiness(businessId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to search businesses that match the provided text query or are close to a specified point.
     * @summary Search businesses
     * @param {string} [text] Filter by business name
     * @param {string} [location] Filter by business location
     * @param {number} [proximity] Filter by distance from location in meters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchBusinesses(
      text?: string,
      location?: string,
      proximity?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserBusinessesSearchResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchBusinesses(
        text,
        location,
        proximity,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     * This endpoint is used to get info about a business
     * @summary Get business info
     * @param {string} businessId Public id of the business
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBusiness(businessId: string, options?: any): AxiosPromise<PublicBusinessDetailsAPIModel> {
      return localVarFp
        .getBusiness(businessId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to search businesses that match the provided text query or are close to a specified point.
     * @summary Search businesses
     * @param {string} [text] Filter by business name
     * @param {string} [location] Filter by business location
     * @param {number} [proximity] Filter by distance from location in meters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBusinesses(
      text?: string,
      location?: string,
      proximity?: number,
      options?: any
    ): AxiosPromise<GetUserBusinessesSearchResponse> {
      return localVarFp
        .searchBusinesses(text, location, proximity, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   * This endpoint is used to get info about a business
   * @summary Get business info
   * @param {string} businessId Public id of the business
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getBusiness(businessId: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getBusiness(businessId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to search businesses that match the provided text query or are close to a specified point.
   * @summary Search businesses
   * @param {string} [text] Filter by business name
   * @param {string} [location] Filter by business location
   * @param {number} [proximity] Filter by distance from location in meters
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public searchBusinesses(
    text?: string,
    location?: string,
    proximity?: number,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .searchBusinesses(text, location, proximity, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * VirtualCardsApi - axios parameter creator
 * @export
 */
export const VirtualCardsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * This endpoint is used to buy an item for points from the virtual card.
     * @summary Buy an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemDefinitionId Public ID of the item definition requested by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buyItem: async (
      businessId: string,
      itemDefinitionId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('buyItem', 'businessId', businessId);
      // verify required parameter 'itemDefinitionId' is not null or undefined
      assertParamExists('buyItem', 'itemDefinitionId', itemDefinitionId);
      const localVarPath = `/user/cards/virtual/{businessId}/itemsDefinitions/{itemDefinitionId}`
        .replace(`{${'businessId'}}`, encodeURIComponent(String(businessId)))
        .replace(`{${'itemDefinitionId'}}`, encodeURIComponent(String(itemDefinitionId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to register a new virtual card to the account of the currently logged in user.
     * @summary Add a new virtual card
     * @param {string} businessId Public ID of the business which card was requested to be added by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualCard: async (
      businessId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('createVirtualCard', 'businessId', businessId);
      const localVarPath = `/user/cards/virtual/{businessId}`.replace(
        `{${'businessId'}}`,
        encodeURIComponent(String(businessId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to return an item, and get back points that were spent on that item.
     * @summary Delete an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemId Public ID of the item requested to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem: async (
      businessId: string,
      itemId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('deleteItem', 'businessId', businessId);
      // verify required parameter 'itemId' is not null or undefined
      assertParamExists('deleteItem', 'itemId', itemId);
      const localVarPath = `/user/cards/virtual/{businessId}/items/{itemId}`
        .replace(`{${'businessId'}}`, encodeURIComponent(String(businessId)))
        .replace(`{${'itemId'}}`, encodeURIComponent(String(itemId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to delete a virtual card from the account of the currently logged in user.
     * @summary Delete a virtual card
     * @param {string} businessId Public ID of the business which card was requested to be deleted from the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualCard: async (
      businessId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('deleteVirtualCard', 'businessId', businessId);
      const localVarPath = `/user/cards/virtual/{businessId}`.replace(
        `{${'businessId'}}`,
        encodeURIComponent(String(businessId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * This endpoint is used to retrieve details of a virtual card owned by the currently logged in user.
     * @summary Get info about a virtual card
     * @param {string} businessId Public ID of the business which card was requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualCard: async (
      businessId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'businessId' is not null or undefined
      assertParamExists('getVirtualCard', 'businessId', businessId);
      const localVarPath = `/user/cards/virtual/{businessId}`.replace(
        `{${'businessId'}}`,
        encodeURIComponent(String(businessId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication sessionToken required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * VirtualCardsApi - functional programming interface
 * @export
 */
export const VirtualCardsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = VirtualCardsApiAxiosParamCreator(configuration);
  return {
    /**
     * This endpoint is used to buy an item for points from the virtual card.
     * @summary Buy an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemDefinitionId Public ID of the item definition requested by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buyItem(
      businessId: string,
      itemDefinitionId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostUserVirtualCardItemResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buyItem(
        businessId,
        itemDefinitionId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to register a new virtual card to the account of the currently logged in user.
     * @summary Add a new virtual card
     * @param {string} businessId Public ID of the business which card was requested to be added by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createVirtualCard(
      businessId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createVirtualCard(
        businessId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to return an item, and get back points that were spent on that item.
     * @summary Delete an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemId Public ID of the item requested to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteItem(
      businessId: string,
      itemId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteItem(
        businessId,
        itemId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to delete a virtual card from the account of the currently logged in user.
     * @summary Delete a virtual card
     * @param {string} businessId Public ID of the business which card was requested to be deleted from the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteVirtualCard(
      businessId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefaultResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVirtualCard(
        businessId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * This endpoint is used to retrieve details of a virtual card owned by the currently logged in user.
     * @summary Get info about a virtual card
     * @param {string} businessId Public ID of the business which card was requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getVirtualCard(
      businessId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserVirtualCardResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getVirtualCard(businessId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * VirtualCardsApi - factory interface
 * @export
 */
export const VirtualCardsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = VirtualCardsApiFp(configuration);
  return {
    /**
     * This endpoint is used to buy an item for points from the virtual card.
     * @summary Buy an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemDefinitionId Public ID of the item definition requested by the user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buyItem(
      businessId: string,
      itemDefinitionId: string,
      options?: any
    ): AxiosPromise<PostUserVirtualCardItemResponse> {
      return localVarFp
        .buyItem(businessId, itemDefinitionId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to register a new virtual card to the account of the currently logged in user.
     * @summary Add a new virtual card
     * @param {string} businessId Public ID of the business which card was requested to be added by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualCard(businessId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .createVirtualCard(businessId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to return an item, and get back points that were spent on that item.
     * @summary Delete an item
     * @param {string} businessId Public ID of the business which card was requested
     * @param {string} itemId Public ID of the item requested to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteItem(businessId: string, itemId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .deleteItem(businessId, itemId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to delete a virtual card from the account of the currently logged in user.
     * @summary Delete a virtual card
     * @param {string} businessId Public ID of the business which card was requested to be deleted from the account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualCard(businessId: string, options?: any): AxiosPromise<DefaultResponse> {
      return localVarFp
        .deleteVirtualCard(businessId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * This endpoint is used to retrieve details of a virtual card owned by the currently logged in user.
     * @summary Get info about a virtual card
     * @param {string} businessId Public ID of the business which card was requested
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualCard(businessId: string, options?: any): AxiosPromise<GetUserVirtualCardResponse> {
      return localVarFp
        .getVirtualCard(businessId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * VirtualCardsApi - object-oriented interface
 * @export
 * @class VirtualCardsApi
 * @extends {BaseAPI}
 */
export class VirtualCardsApi extends BaseAPI {
  /**
   * This endpoint is used to buy an item for points from the virtual card.
   * @summary Buy an item
   * @param {string} businessId Public ID of the business which card was requested
   * @param {string} itemDefinitionId Public ID of the item definition requested by the user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VirtualCardsApi
   */
  public buyItem(businessId: string, itemDefinitionId: string, options?: AxiosRequestConfig) {
    return VirtualCardsApiFp(this.configuration)
      .buyItem(businessId, itemDefinitionId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to register a new virtual card to the account of the currently logged in user.
   * @summary Add a new virtual card
   * @param {string} businessId Public ID of the business which card was requested to be added by user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VirtualCardsApi
   */
  public createVirtualCard(businessId: string, options?: AxiosRequestConfig) {
    return VirtualCardsApiFp(this.configuration)
      .createVirtualCard(businessId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to return an item, and get back points that were spent on that item.
   * @summary Delete an item
   * @param {string} businessId Public ID of the business which card was requested
   * @param {string} itemId Public ID of the item requested to be deleted
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VirtualCardsApi
   */
  public deleteItem(businessId: string, itemId: string, options?: AxiosRequestConfig) {
    return VirtualCardsApiFp(this.configuration)
      .deleteItem(businessId, itemId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to delete a virtual card from the account of the currently logged in user.
   * @summary Delete a virtual card
   * @param {string} businessId Public ID of the business which card was requested to be deleted from the account
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VirtualCardsApi
   */
  public deleteVirtualCard(businessId: string, options?: AxiosRequestConfig) {
    return VirtualCardsApiFp(this.configuration)
      .deleteVirtualCard(businessId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * This endpoint is used to retrieve details of a virtual card owned by the currently logged in user.
   * @summary Get info about a virtual card
   * @param {string} businessId Public ID of the business which card was requested
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof VirtualCardsApi
   */
  public getVirtualCard(businessId: string, options?: AxiosRequestConfig) {
    return VirtualCardsApiFp(this.configuration)
      .getVirtualCard(businessId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
